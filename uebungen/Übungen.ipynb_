{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "3474c0fe",
   "metadata": {},
   "source": [
    "# str und int\n",
    "a = \"hallo\"\n",
    "b = 2\n",
    "c = 3\n",
    "\n",
    "1. gib a aus\n",
    "\n",
    "2. gib a 3x aus -> ``hallohallohallo``\n",
    "    - gib a 5x aus und benutze a nur 1x\n",
    "    - benutze nur Variablen\n",
    "    \n",
    "3. addiere b und c und lege es in variable d ab\n",
    "\n",
    "4. multipliziere b und c miteinander und addiere b\n",
    "- ``Ergebnis = 8``\n",
    "\n",
    "5. addiere b mit c und multipliziere es mit b\n",
    "- ``Ergebnis = 10``\n",
    "\n",
    "6. dividiere c durch b und lege es in variable d ab\n",
    "    - welchen type hat d?\n",
    "    - gebe den type aus\n",
    "    \n",
    "7. gib ``2hallo3`` aus\n",
    "    - achte auf type\n",
    "    - benutze nur variablen\n",
    "    - benutze alle variablen\n",
    "    \n",
    "8. gib ``hallohallo3`` aus\n",
    "    - benutze nur variablen\n",
    "    - benutze alle 3 variablen\n",
    "    \n",
    "9. gib ``hallohallo 2 3 hallohallohallo`` aus\n",
    "    - benutze alle variablen\n",
    "    \n",
    "    \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "fc4fa1e1",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "id": "659cf590",
   "metadata": {},
   "source": [
    "# Berechnungen\n",
    "a = 5\n",
    "b = 2\n",
    "c = 3\n",
    "\n",
    "\n",
    "Benutze variablen zum Zwischenspeichern wenn du möchtest\n",
    "\n",
    "1. Rechne addiere b, c und b hoch c: \n",
    "- Ergebnis = 13\n",
    "\n",
    "2. Rechne a durch b:\n",
    "- gib das Ergebnis aus\n",
    "- was ist der type? \n",
    "- gibt das Ergebnis in einer Ganzen zahl aus.\n",
    "- ist das Ergebnis korrekt? Wenn nein warum? \n",
    "\n",
    "1. rechne b hoch c und gib den Rest der ganzzahligen Division durch 3 aus -> \n",
    "- ``Ergebnis = 2`` \n",
    "- es gibt 2 wege \n",
    "    - 1. type - manipulation\n",
    "    - 2. google nach \"python division operators\"\n",
    "\n",
    "2. addiere b mit c und gibt den Rest der ganzzahligen Division durch 2 aus -> \n",
    "- ``Ergebnis = 1``\n",
    "- google nach python modulus\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b0013e7f",
   "metadata": {},
   "source": [
    "# Textaufgaben\n",
    "\n",
    "## Aufgabe 1:\n",
    "Ich bekomme 1000€ geschenkt. Kaufe mir für 250€ Bücher und Sonsteiges für 125€\n",
    "- Gib den Rest aus.\n",
    "- Den Rest teile ich mit meinen 2 Freunde in gleichen Anteilen. Wie viel bekommt eine Person?\n",
    "- google nach der Funktion **round()** und gebe die Zahl mit 2 Dezimalstellen aus\n",
    "- führe die Berechnung ohne Zahlen durch (nur mit Varialen)\n",
    "- führe die Berechnung in einer Zeile incl Ausgabe aus\n",
    "- verändere die unrsprüngliche 1000 € auf 1250 ohne die Berechnung zu ändern und gib das Ergebnis aus\n",
    "- jetzt möchte ich nur noch mit einem Freund teilen\n",
    "    \n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "d2bee0cd",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "id": "f7783042",
   "metadata": {},
   "source": [
    "## Aufgabe 2:\n",
    "Ich habe einen Kuchen und möchte ihn auf 8 Stücke aufteilen.\n",
    "- 3 Personen, jede soll gleich viel bekommen. Wie viel bekommt jede Person?\n",
    "    - beachte das man ein Stück nicht mehr Teilen kann (keine Fließkommazahlen möglich)\n",
    "- berechne den Rest\n",
    "- ändere die 8 Stücke auf 6\n",
    "     \n",
    "      \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "28356fb6",
   "metadata": {},
   "outputs": [],
   "source": [
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "77c02763",
   "metadata": {},
   "source": [
    "# Exercises for Python 3"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0396a083",
   "metadata": {},
   "source": [
    "## 2. Input manipulation\n",
    "\n",
    "Erstelle Variablen und frage den User nach 2 Zahlen; die Ausgabe soll exakt wie unten aussehen: (z.B. *var1=5*, *var2=8*)\n",
    "- gib die Zahlen aus \n",
    "    - ``Zahl 1: 5``\n",
    "    - ``Zahl 2: 8``    \n",
    "- klebe die Zahlen aneinander \n",
    "    - ``Zahl: 58``\n",
    "    - ``Zahl: 85``\n",
    "- gib var1 * 85 aus, benutze nur Variablen:\n",
    "- ``Ergebnis: 8585858585``\n",
    "- addiere var1 + var2\n",
    "    - ``Ergebnis: 13``\n",
    "- printe die Rechnung und das Ergebnis -> output\n",
    "    - ``5 + 8 - 5 = 8`` \n",
    "    - google nach f-string und gibt es mit einem f-string aus\n",
    "    \n",
    "- ändere deine Variablen. Alle Ergebnisse sollen sich dann ebenfalls ändern\n",
    "\n",
    "- frag den user nach einer Zahl und printe es direkt aus\n",
    "    - der code darf nur eine line haben\n",
    "\n",
    "- frag den user nach einer Zahl und addiere var1 sie\n",
    "    - nur eine line code erlaubt\n",
    "\n",
    "- frag den user nach 2 Zahlen und addiere diese\n",
    "    - nur eine line code erlaubt\n",
    "    \n",
    "\n",
    "  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "541d36d8",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "id": "1712b17b",
   "metadata": {},
   "source": [
    "# IF - Einführung\n",
    "\n",
    "If-Else-Bedinungen sind der Einstieg in die Programmierung um Bedinugen abzufragen und dann nach Wahrheitswerten zu handeln:\n",
    "\n",
    "```code\n",
    "if VAR == BEDINGUNG: \n",
    "    do\n",
    "else: \n",
    "    do\n",
    "```\n",
    "siehe Beispiel unten und spiel damit herum wenn du möchtest\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "76cb9b03",
   "metadata": {},
   "outputs": [],
   "source": [
    "#was erwartest du für eine Ausgabe? Welche Ausgabe erwartets du von print(a==5) und welcher Type kommt raus?\n",
    "# drücke STRG+RETURN und führe die Funktion aus\n",
    "#ändere a und schaue was passiert\n",
    "a = 5 \n",
    "\n",
    "if a == 5:\n",
    "    print(\"Richtig\")\n",
    "    print(a==5)\n",
    "    print(type(a==5))\n",
    "else: \n",
    "    print(\"Falsch\")\n",
    "    print(a==5)\n",
    "    print(type(a!=5))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "92433007",
   "metadata": {},
   "source": [
    "## weiter gehts !\n",
    "\n",
    "In If-Funktionen können alle Operatoren benutz werden um True/False abzufragen und dann eine entsprechende Ausgabe zu bekommen.\n",
    "\n",
    "## Übungen:\n",
    "var1= 6\n",
    "var2 = 5\n",
    "\n",
    "1. erstelle eine If-Funktion und prüfe folgendes:\n",
    "- wenn var1 größer als 5 ist gib ``Größer`` aus, sonst gibt ``Kleiner`` aus\n",
    "- verändere var1 auf 4 und prüfe deine Ausgabe\n",
    "- was passiert wenn var1=5? Warum? Was könnte man ändern?\n",
    "\n",
    "2. erstelle eine If-Funktion und prüfe:\n",
    "- wenn var2 nicht gleich 4 gib ``You got it: 5 ist nicht gleich`` aus, sonst ``richtig: 5 = 5``\n",
    "- gib den type\n",
    "- gib den Wahrheitswert False or True aus\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "d58812fd",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "id": "38c1b729",
   "metadata": {},
   "source": [
    "## Textaufgabe \n",
    "\n",
    "Ich möchte mir ein Kilo Äpfel für 4 € kaufen ```aepfle = 4``` und habe ```geld = x``` wobei x jede Zahl sein kann und von dir eingefügt um die Funktion zu testen.\n",
    "\n",
    "- Wenn das Geld reicht gib ```Kannste kaufen``` aus und ```Rückgeld: <x>``` wie viel ich noch übrig habe\n",
    "- wenn nicht ```Geh weiter Pfandflaschen sammeln! Dir fehlen noch <x>€\"```\n",
    "    - benutze hier einen f-string\n",
    "    \n",
    "- ändere x also den Wert von Variable ```geld``` beliebig und teste deine Funktion, spiele mit der Ausgabe.\n",
    "- welchen type hat deine Rückgeld und warum?\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "23d790fe",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "id": "380e953b",
   "metadata": {},
   "source": [
    "## Textaufgabe // Gerade, ungerade\n",
    "\n",
    "Schau dir hierfür nochmal den *modulus-operator* an\n",
    "\n",
    "Erstelle eine if-function und prüfe ob die variable a gerade oder ungerade ist\n",
    "\n",
    "Bsp:\n",
    "```\n",
    "a = 5\n",
    "*if-else-funktion*\n",
    "Ausgabe: \"a ist ungerade\"\n",
    "```\n",
    "```\n",
    "a = 4\n",
    "Ausgabe: \"a ist gerade\"\n",
    "``` "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "fd13b683",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.10"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
